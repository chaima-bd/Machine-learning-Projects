{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8bde7417",
   "metadata": {},
   "source": [
    "# Atelier 5 : Apprentissage supervisé\n",
    "(Régression)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "81240b13",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_diabetes # Importation des données\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score, cross_val_predict\n",
    "from sklearn.model_selection import KFold\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "002f08f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1e29b1a1000>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = load_diabetes()\n",
    "#print(data)\n",
    "X = data.data\n",
    "y = data.target\n",
    "#print(y)\n",
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(X[:,0],X[:,1],c=y,alpha=0.8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cc681cd",
   "metadata": {},
   "source": [
    "## 1- Entraîner les modèles de régression sur la base des diabètes en utilisant les deux stratégies\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f728063",
   "metadata": {},
   "source": [
    "###  Apprentissage traditionnel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "edba20be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train  (331, 10)\n",
      "test :  (111, 10)\n"
     ]
    }
   ],
   "source": [
    "# Splite the data \n",
    "# la stratégie d'apprentissage traditionnelle 75 pour E et 25 pour le test.\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n",
    "print(\"train \",X_train.shape)\n",
    "print(\"test : \",X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "62f97074",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[157.44439211  68.25907478 161.8801239  119.48428364 264.59871597\n",
      " 124.31677164 160.74760036 119.61516051 218.87028988 247.56232184\n",
      " 197.35391054 151.78659679  38.60693452 172.2366586  243.16501599\n",
      " 232.7526966   81.95646528 187.11195375 134.40893825  99.54593802\n",
      " 235.71695952 115.62480576  63.41093401 279.66516249 181.55457641\n",
      " 179.74810208 111.07618389 188.4474363  151.24507263 196.640429\n",
      " 172.15896572 193.6234624   53.34973366 155.01211688 263.68926154\n",
      " 138.76772896 111.11766713 214.43587696 208.81201287 199.59745601\n",
      " 165.12920744  75.09665798 249.66595701 116.77723179 158.86752743\n",
      " 171.18249508 184.50881286 143.45447913  67.08273254 158.00359342\n",
      " 147.24015396 135.71315873 122.78970349 200.6755395  175.13783985\n",
      "  99.06391488 109.71337728 167.75828858 234.78345176  74.45657942\n",
      "  66.03257263  80.24570578  97.81192021 123.54903509 118.78961102\n",
      " 159.2823986  224.74008983 159.73104144 203.47871264  81.59458754\n",
      " 180.43290347 101.51252349 168.66275189  96.71557026 266.0918446\n",
      "  62.40479333 258.44763173 129.84042465 221.5664733  171.03193005\n",
      "  95.87478257 126.22704871  91.8946526   82.42711132 138.98122597\n",
      "  54.46952549 102.26287636 123.1551048  236.11370593 123.68935859\n",
      " 140.77178141 168.93806876 113.21725311 174.48896587 151.85088417\n",
      " 126.29424904 118.26295184 112.08306812 196.68828812 206.18689957\n",
      "  92.75931657  97.43439153 257.7646931   81.64565528 115.24175082\n",
      " 172.72087729 172.43783275  68.77956907 172.90870985  76.8516923\n",
      " 217.90887497]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Initialiser le modèle de régression linéaire\n",
    "lr_model = LinearRegression()\n",
    "\n",
    "# Entraîner le modèle sur l'ensemble d'apprentissage\n",
    "lr_model.fit(X_train, y_train)\n",
    "\n",
    "# Faire des prédictions sur l'ensemble de test\n",
    "y_pred_lr = lr_model.predict(X_test)\n",
    "print(y_pred_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "80082084",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "# Créer des fonctionnalités polynomiales de degré 2\n",
    "poly = PolynomialFeatures(degree=2)\n",
    "X_poly_train = poly.fit_transform(X_train)\n",
    "X_poly_test = poly.fit_transform(X_test)\n",
    "\n",
    "# Initialiser le modèle de régression linéaire avec des fonctionnalités polynomiales\n",
    "poly_model = LinearRegression()\n",
    "\n",
    "# Entraîner le modèle sur l'ensemble d'apprentissage avec les fonctionnalités polynomiales\n",
    "poly_model.fit(X_poly_train, y_train)\n",
    "\n",
    "# Faire des prédictions sur l'ensemble de test avec les fonctionnalités polynomiales\n",
    "y_pred_poly = poly_model.predict(X_poly_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "d97f798f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "\n",
    "# Initialiser le modèle KNN avec k=5\n",
    "knn_model = KNeighborsRegressor(n_neighbors=5)\n",
    "\n",
    "# Entraîner le modèle sur l'ensemble d'apprentissage\n",
    "knn_model.fit(X_train, y_train)\n",
    "\n",
    "# Faire des prédictions sur l'ensemble de test\n",
    "y_pred_knn = knn_model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d947cd57",
   "metadata": {},
   "source": [
    "### Apprentissage validation croisée "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "7986ce3d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#############################\n",
      "#############################\n",
      "#############################\n",
      "#############################\n",
      "#############################\n"
     ]
    }
   ],
   "source": [
    "############\n",
    "# Définir le nombre de plis pour la validation croisée\n",
    "k = 5\n",
    "\n",
    "# Créer un objet KFold pour la validation croisée\n",
    "kf = KFold(n_splits=k, shuffle=True, random_state=42)\n",
    "\n",
    "# Initialiser une liste pour stocker les prédictions de chaque pli\n",
    "predictions_lr = []\n",
    "predictions_poly = []\n",
    "predictions_knn = []\n",
    "\n",
    "# Boucle sur chaque pli de validation croisée\n",
    "for train_index, test_index in kf.split(X_train):\n",
    "    \n",
    "    # Extraire les ensembles de formation et de test pour ce pli\n",
    "    X_train_fold, X_test_fold = X_train[train_index], X_train[test_index]\n",
    "    y_train_fold, y_test_fold = y_train[train_index], y_train[test_index]\n",
    "    \n",
    "    # Entraîner le modèle sur les données de formation de ce pli\n",
    "    lr_model.fit(X_train_fold, y_train_fold)\n",
    "    poly_model.fit(X_train_fold, y_train_fold)\n",
    "    knn_model.fit(X_train_fold, y_train_fold)\n",
    "    \n",
    "    # Faire des prédictions sur les données de test de ce pli\n",
    "    y_pred_fold_lr = lr_model.predict(X_test_fold)\n",
    "    y_pred_fold_poly = poly_model.predict(X_test_fold)\n",
    "    y_pred_fold_knn = knn_model.predict(X_test_fold)\n",
    "    \n",
    "    #print(y_pred_fold_lr)\n",
    "    #print(y_pred_fold_poly)\n",
    "    #print(y_pred_fold_knn)\n",
    "    print(\"#############################\")\n",
    "    # Ajouter les prédictions à la liste\n",
    "    predictions_lr.extend(y_pred_fold_lr)\n",
    "    predictions_poly.extend(y_pred_fold_poly)\n",
    "    predictions_knn.extend(y_pred_fold_knn)\n",
    "    "
   ]
  },
  {
   "cell_type": "raw",
   "id": "4858b635",
   "metadata": {},
   "source": [
    "# PolynomialFeatures Avec la method de validation croisée\n",
    "poly_scores  = cross_val_score(poly_model,X_train,y_train,cv=5)\n",
    "#Affichage des résultats\n",
    "print (\"Le score obtenu pour chacun des 5 fold créé est : \",poly_scores )\n",
    "print (\"Cela fait une moyenne de : \",poly_scores.mean())\n",
    "print (\"Et un écart-type de  : \",poly_scores.std())"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5919b074",
   "metadata": {},
   "source": [
    "knn_scores = cross_val_score(knn_model, X, y, cv=10)\n",
    "#Affichage des résultats\n",
    "print (\"Le score obtenu pour chacun des 5 fold créé est : \",knn_scores )\n",
    "print (\"Cela fait une moyenne de : \",knn_scores.mean())\n",
    "print (\"Et un écart-type de  : \",knn_scores.std())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "286ceb49",
   "metadata": {},
   "source": [
    "## 2- Evaluer les performances des modèles obtenus, en quantifiant leur erreur avec les métriques  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "059f7ea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error #Erreur quadratique moyenne (MSE)\n",
    "from sklearn.metrics import mean_absolute_error #Erreur absolue moyenne (MAE)\n",
    "from sklearn.metrics import mean_squared_error #Racine de l’erreur quadratique moyenne (RMSE)\n",
    "from sklearn.metrics import mean_squared_log_error #Racine du log de l’erreur quadratique moyenne (RMSLE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be149dc7",
   "metadata": {},
   "source": [
    "### 1:LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "28da272e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "MSE d'apprentissage traditionnelle: 2917.1127047637606\n",
      "MAE d'apprentissage traditionnelle: 43.349234567015394\n",
      "RMSE d'apprentissage traditionnelle: 2917.1127047637606\n",
      "RMSLE d'apprentissage traditionnelle: 0.17087078600969444\n"
     ]
    }
   ],
   "source": [
    "# la stratégie d'apprentissage traditionnelle\n",
    "# Calculer l'erreur quadratique moyenne entre les prédictions et les vraies valeurs\n",
    "mse_lr = mean_squared_error(y_test, y_pred_lr)\n",
    "mae_lr = mean_absolute_error(y_test, y_pred_lr)\n",
    "rmse_lr = mean_squared_error(y_test, y_pred_lr)\n",
    "rmsle_lr = mean_squared_log_error(y_test, y_pred_lr)\n",
    "print(mean_squared_log_error(y_train, y_train))\n",
    "\n",
    "\n",
    "# Afficher l'erreur quadratique moyenne\n",
    "print(\"MSE d'apprentissage traditionnelle:\", mse_lr)\n",
    "print(\"MAE d'apprentissage traditionnelle:\", mae_lr)\n",
    "print(\"RMSE d'apprentissage traditionnelle:\", rmse_lr)\n",
    "print(\"RMSLE d'apprentissage traditionnelle:\", rmsle_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "634750f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prédiction sur les données d'entraînement\n",
    "y_pred_lr_train = lr_model.predict(X_train)\n",
    "# Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble d'entraînement\n",
    "mse_lr_train = mean_squared_error(y_train, y_pred_lr_train)\n",
    "mae_lr_train = mean_absolute_error(y_train, y_pred_lr_train)\n",
    "rmse_lr_train = mean_squared_error(y_train, y_pred_lr_train)\n",
    "rmsle_lr_train = mean_squared_log_error(y_train, y_pred_lr_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "ca3cfc60",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Initialisation des scores\n",
    "mse_train_scores_lr = []\n",
    "mae_train_scores_lr = []\n",
    "rmse_train_scores_lr = []\n",
    "rmsle_train_scores_lr = []\n",
    "\n",
    "mse_val_scores_lr = []\n",
    "mae_val_scores_lr = []\n",
    "rmse_val_scores_lr = []\n",
    "rmsle_val_scores_lr = []\n",
    "# Définition de la validation croisée avec K=5 folds\n",
    "kf = KFold(n_splits=5)\n",
    "# Boucle sur les folds\n",
    "for train_index, val_index in kf.split(X_train):\n",
    "    \n",
    "    # Séparation des données d'entraînement et de validation\n",
    "    X_train_fold, X_val_fold = X_train[train_index], X_train[val_index]\n",
    "    y_train_fold, y_val_fold = y_train[train_index], y_train[val_index]\n",
    "    \n",
    "    # Initialisation et entraînement du modèle de régression linéaire\n",
    "    lr = LinearRegression()\n",
    "    lr.fit(X_train_fold, y_train_fold)\n",
    "    \n",
    "    # Prédiction sur les données d'entraînement\n",
    "    y_pred_train = lr.predict(X_train_fold)\n",
    "    \n",
    "    # Prédiction sur les données de validation\n",
    "    y_pred_val = lr.predict(X_val_fold)\n",
    "    \n",
    "    # Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble d'entraînement\n",
    "    mse_train_scores_lr.append(mean_squared_error(y_train_fold, y_pred_train))\n",
    "    mae_train_scores_lr.append(mean_absolute_error(y_train_fold, y_pred_train))\n",
    "    rmse_train_scores_lr.append(np.sqrt(mean_squared_error(y_train_fold, y_pred_train)))\n",
    "    rmsle_train_scores_lr.append(np.sqrt(mean_squared_error(np.log(y_train_fold+1), np.log(y_pred_train+1))))\n",
    "    \n",
    "    # Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble de validation\n",
    "    mse_val_scores_lr.append(mean_squared_error(y_val_fold, y_pred_val))\n",
    "    mae_val_scores_lr.append(mean_absolute_error(y_val_fold, y_pred_val))\n",
    "    rmse_val_scores_lr.append(np.sqrt(mean_squared_error(y_val_fold, y_pred_val)))\n",
    "    rmsle_val_scores_lr.append(np.sqrt(mean_squared_error(np.log(y_val_fold+1), np.log(y_pred_val+1))))\n",
    "\n",
    "# Moyenne des scores d'erreur pour l'ensemble d'entraînement\n",
    "mse_train_scores_lr = np.mean(mse_train_scores)\n",
    "mae_train_score_lr = np.mean(mae_train_scores)\n",
    "rmse_train_score_lr =  np.mean(rmse_train_scores)\n",
    "rmsle_train_score_lr =  np.mean(rmsle_train_scores)\n",
    "\n",
    "# Moyenne des scores d'erreur pour l'ensemble de validation \n",
    "mse_scores_lr = np.mean(mse_val_scores)\n",
    "mae_scores_lr = np.mean(mae_val_scores)\n",
    "rmse_scores_lr = np.mean(rmse_val_scores)\n",
    "rmsle_scores_lr = np.mean(rmsle_val_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "edcca02d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Moyenne des scores d'erreur pour l'ensemble d'entraînement :\n",
      "MSE :  2889.2025114767966\n",
      "MAE :  43.61633258962668\n",
      "RMSE :  53.73688237421406\n",
      "RMSLE :  0.42996613758019925\n",
      "Moyenne des scores d'erreur pour l'ensemble de validation :\n",
      "MSE :  3230.8819818332886\n",
      "MAE :  46.15765890029557\n",
      "RMSE :  56.57764987212769\n",
      "RMSLE :  0.44625067122335393\n"
     ]
    }
   ],
   "source": [
    "# Affichage des scores moyens pour l'ensemble d'entraînement et de validation\n",
    "print(\"Moyenne des scores d'erreur pour l'ensemble d'entraînement :\")\n",
    "print(\"MSE : \", mse_train_scores_lr)\n",
    "print(\"MAE : \", mae_train_score_lr)\n",
    "print(\"RMSE : \", rmse_train_score_lr)\n",
    "print(\"RMSLE : \", rmsle_train_score_lr)\n",
    "\n",
    "print(\"Moyenne des scores d'erreur pour l'ensemble de validation :\")\n",
    "print(\"MSE : \", mse_scores_lr)\n",
    "print(\"MAE : \", mae_scores_lr)\n",
    "print(\"RMSE : \", rmse_scores_lr)\n",
    "print(\"RMSLE : \", rmsle_scores_lr)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5bf144f3",
   "metadata": {},
   "source": [
    "# validation croisée \n",
    "# Calculer le score de MSE pour la validation croisée\n",
    "mse_scores_lr = -cross_val_score(lr_model, X, y, cv=5, scoring='neg_mean_squared_error')\n",
    "# Calculer le score de MAE pour la validation croisée\n",
    "mae_scores_lr = -cross_val_score(lr_model, X, y, cv=5, scoring='neg_mean_absolute_error')\n",
    "# Calculer le score de RMSE pour la validation croisée\n",
    "rmse_scores_lr = np.sqrt(mse_scores_lr)\n",
    "# Calculer le score de RMSLE pour la validation croisée\n",
    "rmsle_scores_lr = np.sqrt(np.mean(np.log(np.clip((y - lr_model.predict(X)) ** 2, 1e-10, float('inf')))))\n",
    "\n",
    "# Afficher les scores moyens de chaque métrique d'évaluation\n",
    "print(\"MSE: \", mse_scores_lr.mean())\n",
    "print(\"MAE: \", mae_scores_lr.mean())\n",
    "print(\"RMSE: \", rmse_scores_lr.mean())\n",
    "print(\"RMSLE: \", rmsle_scores_lr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd89ba58",
   "metadata": {},
   "source": [
    "### 2:PolynomialFeatures "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "22715f9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE d'apprentissage traditionnelle: 4853.553485446568\n",
      "MAE d'apprentissage traditionnelle: 52.43009895558274\n",
      "RMSE d'apprentissage traditionnelle: 4853.553485446568\n",
      "RMSLE d'apprentissage traditionnelle: 0.21543211866330192\n"
     ]
    }
   ],
   "source": [
    "# la stratégie d'apprentissage traditionnelle\n",
    "# Calculer l'erreur quadratique moyenne entre les prédictions et les vraies valeurs\n",
    "mse_poly = mean_squared_error(y_test, y_pred_poly)\n",
    "mae_poly = mean_absolute_error(y_test, y_pred_poly)\n",
    "rmse_poly = mean_squared_error(y_test, y_pred_poly)\n",
    "rmsle_poly = mean_squared_log_error(y_test, y_pred_poly)\n",
    "\n",
    "# Afficher l'erreur quadratique moyenne\n",
    "print(\"MSE d'apprentissage traditionnelle:\", mse_poly)\n",
    "print(\"MAE d'apprentissage traditionnelle:\", mae_poly)\n",
    "print(\"RMSE d'apprentissage traditionnelle:\", rmse_poly)\n",
    "print(\"RMSLE d'apprentissage traditionnelle:\", rmsle_poly)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "2db050d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prédiction sur les données d'entraînement\n",
    "y_pred_poly_train = poly_model.predict(X_train)\n",
    "# Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble d'entraînement\n",
    "mse_poly_train = mean_squared_error(y_train, y_pred_poly_train)\n",
    "mae_poly_train = mean_absolute_error(y_train, y_pred_poly_train)\n",
    "rmse_poly_train = mean_squared_error(y_train, y_pred_poly_train)\n",
    "rmsle_poly_train = mean_squared_log_error(y_train, y_pred_poly_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "b589b2f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialisation des scores\n",
    "mse_train_scores_poly = []\n",
    "mae_train_scores_poly  = []\n",
    "rmse_train_scores_poly  = []\n",
    "rmsle_train_scores_poly  = []\n",
    "\n",
    "mse_val_scores_poly  = []\n",
    "mae_val_scores_poly  = []\n",
    "rmse_val_scores_poly  = []\n",
    "rmsle_val_scores_poly  = []\n",
    "# Définition de la validation croisée avec K=5 folds\n",
    "kf = KFold(n_splits=5)\n",
    "# Boucle sur les folds\n",
    "for train_index, val_index in kf.split(X_train):\n",
    "    \n",
    "    # Séparation des données d'entraînement et de validation\n",
    "    X_train_fold, X_val_fold = X_train[train_index], X_train[val_index]\n",
    "    y_train_fold, y_val_fold = y_train[train_index], y_train[val_index]\n",
    "    \n",
    "    # Initialisation et entraînement du modèle de régression linéaire\n",
    "  \n",
    "    poly_model.fit(X_train_fold, y_train_fold)\n",
    "    \n",
    "    # Prédiction sur les données d'entraînement\n",
    "    y_pred_train_poly = poly_model.predict(X_train_fold)\n",
    "    \n",
    "    # Prédiction sur les données de validation\n",
    "    y_pred_val_poly = poly_model.predict(X_val_fold)\n",
    "    \n",
    "    # Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble d'entraînement\n",
    "    mse_train_scores_poly.append(mean_squared_error(y_train_fold, y_pred_train_poly))\n",
    "    mae_train_scores_poly.append(mean_absolute_error(y_train_fold, y_pred_train_poly))\n",
    "    rmse_train_scores_poly.append(np.sqrt(mean_squared_error(y_train_fold, y_pred_train_poly)))\n",
    "    rmsle_train_scores_poly.append(np.sqrt(mean_squared_error(np.log(y_train_fold+1), np.log(y_pred_train_poly+1))))\n",
    "    \n",
    "    # Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble de validation\n",
    "    mse_val_scores_poly.append(mean_squared_error(y_val_fold, y_pred_val_poly))\n",
    "    mae_val_scores_poly.append(mean_absolute_error(y_val_fold, y_pred_val_poly))\n",
    "    rmse_val_scores_poly.append(np.sqrt(mean_squared_error(y_val_fold, y_pred_val_poly)))\n",
    "    rmsle_val_scores_poly.append(np.sqrt(mean_squared_error(np.log(y_val_fold+1), np.log(y_pred_val_poly+1))))\n",
    "\n",
    "# Moyenne des scores d'erreur pour l'ensemble d'entraînement\n",
    "mse_train_scores_poly = np.mean(mse_train_scores_poly)\n",
    "mae_train_score_poly = np.mean(mae_train_scores_poly)\n",
    "rmse_train_score_poly =  np.mean(rmse_train_scores_poly)\n",
    "rmsle_train_score_poly =  np.mean(rmsle_train_scores_poly)\n",
    "\n",
    "# Moyenne des scores d'erreur pour l'ensemble de validation \n",
    "mse_scores_poly = np.mean(mse_val_scores_poly)\n",
    "mae_scores_poly = np.mean(mae_val_scores_poly)\n",
    "rmse_scores_poly = np.mean(rmse_val_scores_poly)\n",
    "rmsle_scores_poly = np.mean(rmsle_val_scores_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "fc5a2ba5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Moyenne des scores d'erreur pour l'ensemble d'entraînement :\n",
      "MSE :  2829.4273340050677\n",
      "MAE :  43.26277926356257\n",
      "RMSE :  53.183959071662365\n",
      "RMSLE :  0.4150960319367383\n",
      "Moyenne des scores d'erreur pour l'ensemble de validation :\n",
      "MSE :  3221.625571420371\n",
      "MAE :  46.219619204716274\n",
      "RMSE :  56.57673552331058\n",
      "RMSLE :  0.43701967885322046\n"
     ]
    }
   ],
   "source": [
    "# Affichage des scores moyens pour l'ensemble d'entraînement et de validation\n",
    "print(\"Moyenne des scores d'erreur pour l'ensemble d'entraînement :\")\n",
    "print(\"MSE : \", mse_train_scores_poly)\n",
    "print(\"MAE : \", mae_train_score_poly)\n",
    "print(\"RMSE : \", rmse_train_score_poly)\n",
    "print(\"RMSLE : \", rmsle_train_score_poly)\n",
    "\n",
    "print(\"Moyenne des scores d'erreur pour l'ensemble de validation :\")\n",
    "print(\"MSE : \", mse_scores_poly)\n",
    "print(\"MAE : \", mae_scores_poly)\n",
    "print(\"RMSE : \", rmse_scores_poly)\n",
    "print(\"RMSLE : \", rmsle_scores_poly)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "1924832f",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Calculer le score de MSE pour la validation croisée\n",
    "mse_scores_poly = -cross_val_score(poly_model, X, y, cv=5, scoring='neg_mean_squared_error')\n",
    "# Calculer le score de MAE pour la validation croisée\n",
    "mae_scores_poly = -cross_val_score(poly_model, X, y, cv=5, scoring='neg_mean_absolute_error')\n",
    "# Calculer le score de RMSE pour la validation croisée\n",
    "rmse_scores_poly = np.sqrt(mse_scores_poly)\n",
    "# Calculer le score de RMSLE pour la validation croisée\n",
    "rmsle_scores_poly = np.sqrt(np.mean(np.log(np.clip((y - poly_model.predict(X)) ** 2, 1e-10, float('inf')))))\n",
    "\n",
    "# Afficher les scores moyens de chaque métrique d'évaluation\n",
    "print(\"MSE: \", mse_scores_poly.mean())\n",
    "print(\"MAE: \", mae_scores_poly.mean())\n",
    "print(\"RMSE: \", rmse_scores_poly.mean())\n",
    "print(\"RMSLE: \", rmsle_scores_poly)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "151e5f0d",
   "metadata": {},
   "source": [
    "### 3:KNN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ab367fc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE d'apprentissage traditionnelle: 3546.8400000000006\n",
      "MAE d'apprentissage traditionnelle: 46.10630630630631\n",
      "RMSE d'apprentissage traditionnelle: 3546.8400000000006\n",
      "RMSLE d'apprentissage traditionnelle: 0.1887947854250726\n"
     ]
    }
   ],
   "source": [
    "# la stratégie d'apprentissage traditionnelle\n",
    "# Calculer l'erreur quadratique moyenne entre les prédictions et les vraies valeurs\n",
    "mse_knn = mean_squared_error(y_test, y_pred_knn)\n",
    "mae_knn = mean_absolute_error(y_test, y_pred_knn)\n",
    "rmse_knn = mean_squared_error(y_test, y_pred_knn)\n",
    "rmsle_knn = mean_squared_log_error(y_test, y_pred_knn)\n",
    "\n",
    "# Afficher l'erreur quadratique moyenne\n",
    "print(\"MSE d'apprentissage traditionnelle:\", mse_knn)\n",
    "print(\"MAE d'apprentissage traditionnelle:\", mae_knn)\n",
    "print(\"RMSE d'apprentissage traditionnelle:\", rmse_knn)\n",
    "print(\"RMSLE d'apprentissage traditionnelle:\", rmsle_knn)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "19107bfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prédiction sur les données d'entraînement\n",
    "y_pred_knn_train = poly_model.predict(X_train)\n",
    "# Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble d'entraînement\n",
    "mse_knn_train = mean_squared_error(y_train, y_pred_knn_train)\n",
    "mae_knn_train = mean_absolute_error(y_train, y_pred_knn_train)\n",
    "rmse_knn_train = mean_squared_error(y_train, y_pred_knn_train)\n",
    "rmsle_knn_train = mean_squared_log_error(y_train, y_pred_knn_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "0fbeec44",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialisation des scores\n",
    "mse_train_scores_knn = []\n",
    "mae_train_scores_knn  = []\n",
    "rmse_train_scores_knn  = []\n",
    "rmsle_train_scores_knn  = []\n",
    "\n",
    "mse_val_scores_knn  = []\n",
    "mae_val_scores_knn  = []\n",
    "rmse_val_scores_knn  = []\n",
    "rmsle_val_scores_knn  = []\n",
    "# Définition de la validation croisée avec K=5 folds\n",
    "kf = KFold(n_splits=5)\n",
    "# Boucle sur les folds\n",
    "for train_index, val_index in kf.split(X_train):\n",
    "    \n",
    "    # Séparation des données d'entraînement et de validation\n",
    "    X_train_fold, X_val_fold = X_train[train_index], X_train[val_index]\n",
    "    y_train_fold, y_val_fold = y_train[train_index], y_train[val_index]\n",
    "    \n",
    "    # Initialisation et entraînement du modèle de régression linéaire\n",
    "  \n",
    "    knn_model.fit(X_train_fold, y_train_fold)\n",
    "    \n",
    "    # Prédiction sur les données d'entraînement\n",
    "    y_pred_train_knn = knn_model.predict(X_train_fold)\n",
    "    \n",
    "    # Prédiction sur les données de validation\n",
    "    y_pred_val_knn = knn_model.predict(X_val_fold)\n",
    "    \n",
    "    # Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble d'entraînement\n",
    "    mse_train_scores_knn.append(mean_squared_error(y_train_fold, y_pred_train_knn))\n",
    "    mae_train_scores_knn.append(mean_absolute_error(y_train_fold, y_pred_train_knn))\n",
    "    rmse_train_scores_knn.append(np.sqrt(mean_squared_error(y_train_fold, y_pred_train_knn)))\n",
    "    rmsle_train_scores_knn.append(np.sqrt(mean_squared_error(np.log(y_train_fold+1), np.log(y_pred_train_knn+1))))\n",
    "    \n",
    "    # Calcul des scores de MSE, MAE, RMSE et RMSLE pour l'ensemble de validation\n",
    "    mse_val_scores_knn.append(mean_squared_error(y_val_fold, y_pred_val_knn))\n",
    "    mae_val_scores_knn.append(mean_absolute_error(y_val_fold, y_pred_val_knn))\n",
    "    rmse_val_scores_knn.append(np.sqrt(mean_squared_error(y_val_fold, y_pred_val_knn)))\n",
    "    rmsle_val_scores_knn.append(np.sqrt(mean_squared_error(np.log(y_val_fold+1), np.log(y_pred_val_knn+1))))\n",
    "\n",
    "# Moyenne des scores d'erreur pour l'ensemble d'entraînement\n",
    "mse_train_scores_knn = np.mean(mse_train_scores_knn)\n",
    "mae_train_score_knn = np.mean(mae_train_scores_knn)\n",
    "rmse_train_score_knn =  np.mean(rmse_train_scores_knn)\n",
    "rmsle_train_score_knn =  np.mean(rmsle_train_scores_knn)\n",
    "\n",
    "# Moyenne des scores d'erreur pour l'ensemble de validation \n",
    "mse_scores_knn = np.mean(mse_val_scores_knn)\n",
    "mae_scores_knn = np.mean(mae_val_scores_knn)\n",
    "rmse_scores_knn = np.mean(rmse_val_scores_knn)\n",
    "rmsle_scores_knn = np.mean(rmsle_val_scores_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "542ee30b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Moyenne des scores d'erreur pour l'ensemble d'entraînement :\n",
      "MSE :  2610.137916409377\n",
      "MAE :  40.61879874213837\n",
      "RMSE :  51.074111573729354\n",
      "RMSLE :  0.37499902952218445\n",
      "Moyenne des scores d'erreur pour l'ensemble de validation :\n",
      "MSE :  3994.9200850293987\n",
      "MAE :  50.240859339665306\n",
      "RMSE :  63.102733963816924\n",
      "RMSLE :  0.467985025681395\n"
     ]
    }
   ],
   "source": [
    "# Affichage des scores moyens pour l'ensemble d'entraînement et de validation\n",
    "print(\"Moyenne des scores d'erreur pour l'ensemble d'entraînement :\")\n",
    "print(\"MSE : \", mse_train_scores_knn)\n",
    "print(\"MAE : \", mae_train_score_knn)\n",
    "print(\"RMSE : \", rmse_train_score_knn)\n",
    "print(\"RMSLE : \", rmsle_train_score_knn)\n",
    "\n",
    "print(\"Moyenne des scores d'erreur pour l'ensemble de validation :\")\n",
    "print(\"MSE : \", mse_scores_knn)\n",
    "print(\"MAE : \", mae_scores_knn)\n",
    "print(\"RMSE : \", rmse_scores_knn)\n",
    "print(\"RMSLE : \", rmsle_scores_knn)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "19f25ab2",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Calculer le score de MSE pour la validation croisée\n",
    "mse_scores_knn = -cross_val_score(knn_model, X, y, cv=5, scoring='neg_mean_squared_error')\n",
    "# Calculer le score de MAE pour la validation croisée\n",
    "mae_scores_knn = -cross_val_score(knn_model, X, y, cv=5, scoring='neg_mean_absolute_error')\n",
    "# Calculer le score de RMSE pour la validation croisée\n",
    "rmse_scores_knn = np.sqrt(mse_scores_knn)\n",
    "# Calculer le score de RMSLE pour la validation croisée\n",
    "rmsle_scores_knn = np.sqrt(np.mean(np.log(np.clip((y - knn_model.predict(X)) ** 2, 1e-10, float('inf')))))\n",
    "\n",
    "# Afficher les scores moyens de chaque métrique d'évaluation\n",
    "print(\"MSE: \", mse_scores_knn.mean())\n",
    "print(\"MAE: \", mae_scores_knn.mean())\n",
    "print(\"RMSE: \", rmse_scores_knn.mean())\n",
    "print(\"RMSLE: \", rmsle_scores_knn)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24306440",
   "metadata": {},
   "source": [
    "## Comparer les performances des modèles, et donner une interprétation des résultats obtenus "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8e755a97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lr-tradi_train</th>\n",
       "      <th>lr-tradi_val</th>\n",
       "      <th>lr-VC_train</th>\n",
       "      <th>lr-VC_val</th>\n",
       "      <th>poly-tradi_train</th>\n",
       "      <th>poly-tradi_test</th>\n",
       "      <th>poly-VC_train</th>\n",
       "      <th>poly-VC_test</th>\n",
       "      <th>knn-tradi_train</th>\n",
       "      <th>knn-tradi_test</th>\n",
       "      <th>knn-VC_train</th>\n",
       "      <th>knn-VC_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MSE</th>\n",
       "      <td>2913.873492</td>\n",
       "      <td>2917.112705</td>\n",
       "      <td>2889.202511</td>\n",
       "      <td>3230.881982</td>\n",
       "      <td>2913.873492</td>\n",
       "      <td>4853.553485</td>\n",
       "      <td>2829.427334</td>\n",
       "      <td>3221.625571</td>\n",
       "      <td>2884.757413</td>\n",
       "      <td>3546.840000</td>\n",
       "      <td>2610.137916</td>\n",
       "      <td>3994.920085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MAE</th>\n",
       "      <td>43.792506</td>\n",
       "      <td>43.349235</td>\n",
       "      <td>43.616333</td>\n",
       "      <td>46.157659</td>\n",
       "      <td>43.792506</td>\n",
       "      <td>52.430099</td>\n",
       "      <td>43.262779</td>\n",
       "      <td>46.219619</td>\n",
       "      <td>43.934380</td>\n",
       "      <td>46.106306</td>\n",
       "      <td>40.618799</td>\n",
       "      <td>50.240859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RMSE</th>\n",
       "      <td>2913.873492</td>\n",
       "      <td>2917.112705</td>\n",
       "      <td>53.736882</td>\n",
       "      <td>56.577650</td>\n",
       "      <td>2913.873492</td>\n",
       "      <td>4853.553485</td>\n",
       "      <td>53.183959</td>\n",
       "      <td>56.576736</td>\n",
       "      <td>2884.757413</td>\n",
       "      <td>3546.840000</td>\n",
       "      <td>51.074112</td>\n",
       "      <td>63.102734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RMSLE</th>\n",
       "      <td>0.175343</td>\n",
       "      <td>0.170871</td>\n",
       "      <td>0.429966</td>\n",
       "      <td>0.446251</td>\n",
       "      <td>0.175343</td>\n",
       "      <td>0.215432</td>\n",
       "      <td>0.415096</td>\n",
       "      <td>0.437020</td>\n",
       "      <td>0.174533</td>\n",
       "      <td>0.188795</td>\n",
       "      <td>0.374999</td>\n",
       "      <td>0.467985</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       lr-tradi_train  lr-tradi_val  lr-VC_train    lr-VC_val  \\\n",
       "MSE       2913.873492   2917.112705  2889.202511  3230.881982   \n",
       "MAE         43.792506     43.349235    43.616333    46.157659   \n",
       "RMSE      2913.873492   2917.112705    53.736882    56.577650   \n",
       "RMSLE        0.175343      0.170871     0.429966     0.446251   \n",
       "\n",
       "       poly-tradi_train  poly-tradi_test  poly-VC_train  poly-VC_test  \\\n",
       "MSE         2913.873492      4853.553485    2829.427334   3221.625571   \n",
       "MAE           43.792506        52.430099      43.262779     46.219619   \n",
       "RMSE        2913.873492      4853.553485      53.183959     56.576736   \n",
       "RMSLE          0.175343         0.215432       0.415096      0.437020   \n",
       "\n",
       "       knn-tradi_train  knn-tradi_test  knn-VC_train  knn-VC_test  \n",
       "MSE        2884.757413     3546.840000   2610.137916  3994.920085  \n",
       "MAE          43.934380       46.106306     40.618799    50.240859  \n",
       "RMSE       2884.757413     3546.840000     51.074112    63.102734  \n",
       "RMSLE         0.174533        0.188795      0.374999     0.467985  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "evaluation = {\n",
    "\"lr-tradi_train\":{\"MSE\":mse_lr_train,\"MAE\":mae_lr_train,\"RMSE\":rmse_lr_train , \"RMSLE\": rmsle_lr_train },\n",
    "\"lr-tradi_val\":{\"MSE\":mse_lr,\"MAE\":mae_lr,\"RMSE\":rmse_lr , \"RMSLE\": rmsle_lr },\n",
    "    \n",
    "\"lr-VC_train\":{\"MSE\":mse_train_scores_lr,\"MAE\":mae_train_score_lr,\"RMSE\":rmse_train_score_lr , \"RMSLE\": rmsle_train_score_lr},\n",
    "\"lr-VC_val\":{\"MSE\":mse_scores_lr,\"MAE\":mae_scores_lr,\"RMSE\":rmse_scores_lr , \"RMSLE\": rmsle_scores_lr},\n",
    "\n",
    "\"poly-tradi_train\":{\"MSE\":mse_poly_train,\"MAE\":mae_poly_train,\"RMSE\":rmse_poly_train  , \"RMSLE\": rmsle_poly_train },\n",
    "\"poly-tradi_test\":{\"MSE\":mse_poly,\"MAE\":mae_poly,\"RMSE\":rmse_poly  , \"RMSLE\": rmsle_poly },\n",
    "\n",
    "\"poly-VC_train\":{\"MSE\":mse_train_scores_poly, \"MAE\":mae_train_score_poly,\"RMSE\":rmse_train_score_poly , \"RMSLE\": rmsle_train_score_poly },\n",
    "\"poly-VC_test\":{\"MSE\":mse_scores_poly, \"MAE\":mae_scores_poly,\"RMSE\":rmse_scores_poly , \"RMSLE\": rmsle_scores_poly },\n",
    "\n",
    "\"knn-tradi_train\":{\"MSE\":mse_knn_train,\"MAE\":mae_knn_train,\"RMSE\":rmse_knn_train  , \"RMSLE\": rmsle_knn_train },\n",
    "\"knn-tradi_test\":{\"MSE\":mse_knn,\"MAE\":mae_knn,\"RMSE\":rmse_knn  , \"RMSLE\": rmsle_knn },\n",
    "\n",
    "\"knn-VC_train\":{\"MSE\":mse_train_scores_knn,\"MAE\":mae_train_score_knn,\"RMSE\":rmse_train_score_knn , \"RMSLE\": rmsle_train_score_knn },\n",
    "\"knn-VC_test\":{\"MSE\":mse_scores_knn,\"MAE\":mae_scores_knn,\"RMSE\":rmse_scores_knn , \"RMSLE\": rmsle_scores_knn }\n",
    "}\n",
    "\n",
    "pd.DataFrame.from_dict(evaluation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5d906e8",
   "metadata": {},
   "source": [
    "  D'après les résultats, la régression linéaire est le modèle le plus pertinent, car elle a le MSE le plus faible sur l'ensemble de test et le RMSE moyen le plus faible lors de la validation croisée.\n",
    "\n",
    "Cependant, on peut observer que la régression linéaire a le MSE le plus faible sur\n",
    "l'ensemble de test et un score de validation croisée légèrement meilleur que les autres\n",
    "modèles, ce qui pourrait indiquer qu'elle est moins sujette au sur-apprentissage.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eca3da42",
   "metadata": {},
   "source": [
    "Si l'algorithme a également de mauvaises performances sur l'ensemble de test, cela peut indiquer un sur-apprentissage. \n",
    " \n",
    "Si l'algorithme a de bonnes performances sur l'ensemble d'entraînement, mais de mauvaises performances sur l'ensemble de validation et de test, cela peut indiquer un sur-apprentissage.\n",
    "\n",
    "selon MAE l'algorithme knn sous-apprentissage et  lr sur-apprentissage \n",
    "\n",
    " un RMSE élevé peut indiquer un \"sous-apprentissage\" si le modèle ne parvient pas à capturer les relations complexes dans les données comme l'algo de poly avec l'approch traditionelle \n",
    " \n",
    "Si un modèle a un RMSLE élevé KNN sur les données d'entraînement et de test, cela peut indiquer un sous-apprentissage comme l'algo knn validation croisée test .\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
